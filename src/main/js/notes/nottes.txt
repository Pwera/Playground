// Lecture: Get And Manipulate On Individual Elements - Part 1

/*
console.log(document.getElementById('list'));

var el = document.getElementById('list');
console.log(el);
console.log(typeof el);

// var el = document.getElementById('LIST');
// console.log(el);

console.log(el.textContent);
console.log(el.textContent = 'Hello');

var heading = document.getElementById('heading').textContent;
console.log(heading);

var ulElement = document.getElementById('list');
console.log(ulElement.textContent = heading);

console.log(el.innerHTML);
console.log(el.innerHTML = 'Hello');
console.log(el.innerHTML = '<h1>Hello</h1>');
console.log(el.textContent = '<h1>Hello</h1>');

console.log(new Date("January 20, 2020 10:14"));

function getTime(){
    document.getElementById("ss").innerHTML = new Date();
}

setInterval(getTime, 1000);
// hoisting
//dom is not part of html or js
//prymitywy robią kopie, przy przypisaniu.
// obiekty działają jako referencje.
// jest damy c = {} to tworzymy nowy obiekt
// diff w funkcjach wraca global execution context
// diff w metodzie zwraca lokalny conyexy
*/




// mutiple element
var icons = document.getElementsByClassName("fa");

// for(var i=0;i<icons.length; i++){
//     console.log(icons[i]);
// }


var iconsArr = Array.from(icons);
console.log(iconsArr);
console.log(icons);

iconsArr.forEach(function(icon, index, arr ) {
    console.log(icon, index, arr);
});

//single element
var el = document.querySelector("ul li:nth-child(4)")


// getElementsByTagName('tag') return a collection of all aelements in
// the document with the specified tag name

lis = document.getElementsByTagName('li');


// NodeList has forEach without transforming to Array

var aa = document.querySelectorAll("ul li")

aa[0].style.cssText = "font-size: 25px";

// className get and sets the value of class attribute of the specified element

var h2 = document.querySelector("header h2");

h2.addEventListener("click", function(e){
    console.log("clicked", e);
});



-> Immediately Invoked Function Expression (IIFE)
function that runs as soon as it is defined.
(function(){
    console.log("x");
})()


-> Closures
Functions  has always access to the variables of its outer function 
even after the execution context of the outer function is finished.

-> all() apply() bind()
var person = {
    f: "John",
    fullname: function(){
        return this.f;
    }
};

var definedPerson = function(age, x){
    return this.fullname + age;
}
definedPerson.call(person, 1, 1);
definedPerson.call(person, [1,1]);

In apply version we nedd to pass an array.
Both invoking function.

Bind doesn't invoke functions.
var getPerson = definedPerson.bind(person);
getPerson(1,2);

var getPerson2 = definedPerson.bind(person,2);
getPerson(1);


-> JSON
var myObj = {
    f : "?"
}
var data = JSON.stringify(myObj);

var obj2 = JSON.parse(data);


var xmlhttp = new XMLHttpRequest();
xmlhttp.open("GET", "./users.json", true);
xmlhttp.onload = function(){
    if (this.status == 200){
        var data = JSON.parse(this.responseText);
        console.log(data);
    }
}
xmlhttp.send();




